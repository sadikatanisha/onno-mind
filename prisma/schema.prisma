// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Deck {
  id             String         @id @default(cuid())
  userId         String
  title          String
  description    String?
  cardCount      Int?
  topic          String?
  createdAt      DateTime       @default(now())
  sources        Source[]
  cards          Card[]
  schedules      Schedule[]
  conversations  Conversation[] // Link conversations that generated this deck
}

model Source {
  id           String  @id @default(cuid())
  deckId       String
  deck         Deck    @relation(fields: [deckId], references: [id], onDelete: Cascade)
  url          String
  title        String
  snippet      String?
  provider     String?
  metadataJson Json?
}

model Card {
  id          String   @id @default(cuid())
  deckId      String
  deck        Deck     @relation(fields: [deckId], references: [id], onDelete: Cascade)
  front       String
  back        String
  codeSnippet String?
  difficulty  Int?
  order       Int?
  createdAt   DateTime @default(now())
  reviews     Review[]
  schedule    Schedule?
}

model Review {
  id         String   @id @default(cuid())
  cardId     String
  card       Card     @relation(fields: [cardId], references: [id], onDelete: Cascade)
  userId     String
  rating     Int
  reviewedAt DateTime @default(now())
  elapsedMs  Int
}

model Schedule {
  id        String   @id @default(cuid())
  cardId    String   @unique
  card      Card     @relation(fields: [cardId], references: [id], onDelete: Cascade)
  userId    String
  deckId    String
  deck      Deck     @relation(fields: [deckId], references: [id], onDelete: Cascade)
  dueAt     DateTime
  interval  Int      @default(0)
  ease      Float    @default(2.5)
  reps      Int      @default(0)
  lapses    Int      @default(0)
  updatedAt DateTime @updatedAt

  @@index([userId, deckId, dueAt])
}

model Conversation {
  id           String    @id @default(cuid())
  userId       String
  topic        String?
  mode         String    @default("chat") // "chat" | "quiz"
  summary      String?   @db.Text // Cached conversation summary
  deckId       String?   // Optional link to deck
  deck         Deck?     @relation(fields: [deckId], references: [id], onDelete: SetNull)
  quizScore    Int?      // Quiz mode: current score
  quizTotal    Int?      // Quiz mode: total questions
  quizCompleted Boolean  @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  messages     Message[]

  @@index([userId, createdAt])
  @@index([userId, mode])
}

model Message {
  id             String       @id @default(cuid())
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  role           String       // "user" | "assistant" | "system"
  content        String       @db.Text
  metadata       Json?        // Store quiz answers, card refs, etc.
  createdAt      DateTime     @default(now())

  @@index([conversationId, createdAt])
}
