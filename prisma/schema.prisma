// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Deck {
  id        String   @id @default(cuid())
  userId    String
  title     String
  description String?
  cardCount  Int?
  topic     String?
  createdAt DateTime @default(now())
  sources   Source[]
  cards     Card[]
  schedules Schedule[]
}

model Source {
  id           String  @id @default(cuid())
  deckId       String
  deck         Deck    @relation(fields: [deckId], references: [id], onDelete: Cascade)
  url          String
  title        String
  snippet      String?
  provider     String?
  metadataJson Json?
}

model Card {
  id          String   @id @default(cuid())
  deckId      String
  deck        Deck     @relation(fields: [deckId], references: [id], onDelete: Cascade)
  front       String
  back        String
  codeSnippet String?
  difficulty  Int?
  order       Int?
  createdAt   DateTime @default(now())
  reviews     Review[]
  schedule    Schedule?
}

model Review {
  id         String   @id @default(cuid())
  cardId     String
  card       Card     @relation(fields: [cardId], references: [id], onDelete: Cascade)
  userId     String
  rating     Int
  reviewedAt DateTime @default(now())
  elapsedMs  Int
}

model Schedule {
  id        String   @id @default(cuid())
  cardId    String   @unique
  card      Card     @relation(fields: [cardId], references: [id], onDelete: Cascade)
  userId    String
  deckId    String
  deck      Deck     @relation(fields: [deckId], references: [id], onDelete: Cascade)
  dueAt     DateTime
  interval  Int      @default(0)
  ease      Float    @default(2.5)
  reps      Int      @default(0)
  lapses    Int      @default(0)
  updatedAt DateTime @updatedAt

  @@index([userId, deckId, dueAt])
}
